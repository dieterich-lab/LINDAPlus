condition <- all_inputs$condition
save_res <- all_inputs$save_res
background.networks.list <- process_background_network(background.networks.list = background.networks.list,
tf.scores = tf.scores, lr.scores = lr.scores, ccc.scores = ccc.scores)
variables <- create_variables(background.networks.list = background.networks.list)
objective.function <- write_objective_function(variables = variables,
background.networks.list = background.networks.list,
tf.scores = tf.scores,
ligand.scores = ligand.scores,
lr.scores = lr.scores,
ccc.scores = ccc.scores,
lambda1 = lambda1,
lambda2 = lambda2,
lambda3 = lambda3,
lambda4 = lambda4)
c1 <- write_constraints_1(variables = variables,
background.networks.list = background.networks.list)
c2 <- write_constraints_2(variables = variables,
background.networks.list = background.networks.list)
c3 <- write_constraints_3(variables = variables,
background.networks.list = background.networks.list)
c4 <- write_constraints_4(variables = variables,
background.networks.list = background.networks.list)
c5 <- write_constraints_5(variables = variables,
background.networks.list = background.networks.list,
tf.scores = tf.scores)
c6 <- write_constraints_6(variables = variables,
background.networks.list = background.networks.list)
c7 <- write_loop_constraints(variables = variables,
background.networks.list = background.networks.list)
allC <- unique(c(c1, c2, c3, c4, c5, c6, c7))
bounds <- write_bounds(variables = variables)
binaries <- write_binaries(variables = variables)
# write the .lp file
data = paste0("testFile_", condition, ".lp")
write("enter Problem", data)
write("", data, append = TRUE)
write("Minimize", data, append = TRUE)
write(objective.function, data, append = TRUE)
write("Subject To", data, append = TRUE)
write(allC, data, append = TRUE)
write("Bounds", data, append = TRUE)
write(bounds, data, append = TRUE)
write("Binaries", data, append = TRUE)
write(binaries, data, append = TRUE)
write("End", data, append = TRUE)
# write cplexCommand file
data2 = paste0("cplexCommand_", condition, ".txt")
write(paste0("read testFile_", condition, ".lp"), data2)
write(paste0("set mip tolerances mipgap ", mipgap), data2, append = TRUE)
write(paste0("set mip pool relgap ", relgap), data2, append = TRUE)
write(paste0("set mip pool replace ", replace), data2, append = TRUE)
write(paste0("set mip limits populate ", populate), data2, append = TRUE)
write(paste0("set mip pool capacity ", nSolutions), data2, append = TRUE)
write(paste0("set mip pool intensity ", intensity), data2, append = TRUE)
write(paste0("set timelimit ", timelimit), data2, append = TRUE)
write(paste0("set threads ", threads), data2, append = TRUE)
write("populate", data2, append = TRUE)
write(paste0("write results_", condition, ".txt sol all"), data2,
append = TRUE)
write("quit", data2, append = TRUE)
solve_with_cplex(solverPath = solverPath, variables = variables,
condition = condition)
sif <- read_solution_cplex(variables = variables,
background.networks.list = background.networks.list,
tf.scores = tf.scores,
condition = condition)
sif$combined_solutions$CellA
sif$combined_solutions$CellB
sif$combined_solutions$CellC
cleanupILP(condition = 1)
source(file = "computeILP.R")
rm(list = ls())
getwd()
setwd("/home/enio/Downloads/LINDA_Plus_Dev/Three_Cells/Package/")
setwd("/home/enio/Downloads/LINDA_Plus_Dev/Three_Cells/Package/")
list.dirs()
setwd("/home/enio/Downloads/LINDA_Plus_Dev/Three_Cells/Package/Dev1/")
install.packages("LINDAPlus/", repos = NULL)
install.packages("LINDAPlus/", repos = NULL, type = "source")
remove.packages("LINDAPlus")
install.packages("LINDAPlus/", repos = NULL, type = "source")
library(LINDAPlus)
load(file = system.file("extdata", "toy.tf.scores.RData", package = "LINDAPlus"))
print(tf_scores)
load(file = system.file("extdata", "toy.tf.scores.RData", package = "LINDAPlus"))
print(tf.scores)
load(file = system.file("extdata", "toy.top.tf.RData", package = "LINDAPlus"))
print(top)
load(file = system.file("extdata", "toy.top.tf.RData", package = "LINDAPlus"))
print(top.tf)
library(LINDAPlus)
load(file = system.file("extdata", "toy.background.networks.list.RData", package = "LINDAPlus"))
print(background.networks.list)
load(file = system.file("extdata", "toy.tf.scores.RData", package = "LINDAPlus"))
print(tf.scores)
res <- runLINDAPlus(background.networks.list = background.networks.list,
tf.scores = tf.scores,
solverPath = "~/Downloads/cplex",
top.tf = top.tf)
remove.packages("LINDAPlus")
install.packages("LINDAPlus/", repos = NULL, type = "source")
library(LINDAPlus)
load(file = system.file("extdata", "toy.background.networks.list.RData", package = "LINDAPlus"))
print(background.networks.list)
load(file = system.file("extdata", "toy.tf.scores.RData", package = "LINDAPlus"))
print(tf.scores)
load(file = system.file("extdata", "toy.top.tf.RData", package = "LINDAPlus"))
print(top.tf)
res <- runLINDAPlus(background.networks.list = background.networks.list,
tf.scores = tf.scores,
solverPath = "~/Downloads/cplex",
top.tf = top.tf)
print(res$combined_solutions)
library(readr)
interaction_input <- read_csv("~/Downloads/LINDA_Plus_Dev/Ligand_Receptors/cellphonedb-data-5.0.0/data/interaction_input.csv")
View(interaction_input)
load(file = system.file("extdata", "toy.ligand.scores.RData", package = "LINDAPlus"))
print(ligand.scores)
load(file = system.file("extdata", "toy.ligand.scores.RData", package = "LINDAPlus"))
print(ligand.scores)
res <- runLINDAPlus(background.networks.list = background.networks.list,
tf.scores = tf.scores,
solverPath = "~/Downloads/cplex",
top.tf = top.tf,
lr.scores = ligand.scores)
res <- runLINDAPlus(background.networks.list = background.networks.list,
tf.scores = tf.scores,
solverPath = "~/Downloads/cplex",
top.tf = top.tf,
ligand.scores = ligand.scores)
print(res$combined_solutions)
View(ligand.scores)
load(file = system.file("extdata", "toy.lr.scores.RData", package = "LINDAPlus"))
print(lr.scores)
load(file = system.file("extdata", "toy.ccc.scores.RData", package = "LINDAPlus"))
print(ccc.scores)
res <- runLINDAPlus(background.networks.list = background.networks.list,
tf.scores = tf.scores,
solverPath = "~/Downloads/cplex",
top.tf = top.tf,
ccc.scores = ccc.scores,
lambda1 = 10,
lambda3 = 1)
res <- runLINDAPlus(background.networks.list = background.networks.list,
tf.scores = tf.scores,
solverPath = "~/Downloads/cplex",
top.tf = top.tf,
ccc.scores = ccc.scores,
lambda1 = 10,
lambda3 = 1)
print(res$combined_solutions)
print(res$node_attributes)
remove.packages("LINDAPlus")
getwd()
devtools::install_local(path = "LINDAPlus/", dependencies = TRUE, build_vignettes = TRUE)
vignette("LINDAPlus")
rm(list = ls())
getwd()
setwd("/home/enio/Downloads/LINDA_Plus_Dev/Splice_Effects/Toy_Example/Toy2/")
library(readr)
set.seed(1234)
dir.create("src")
#### Cell A
## PPI
ppi <- matrix(data = , nrow = 20, ncol = 2)
ppi[1, ] <- c("A1", "A4")
ppi[2, ] <- c("A2", "A5")
ppi[3, ] <- c("A3", "A6")
ppi[4, ] <- c("A4", "A7")
ppi[5, ] <- c("A4", "A8")
ppi[6, ] <- c("A5", "A8")
ppi[7, ] <- c("A6", "A9")
ppi[8, ] <- c("A6", "A10")
ppi[9, ] <- c("A8", "A11")
ppi[10, ] <- c("A8", "A12")
ppi[11, ] <- c("A9", "A12")
ppi[12, ] <- c("A10", "A13")
ppi[13, ] <- c("A11", "A14")
ppi[14, ] <- c("A11", "A15")
ppi[15, ] <- c("A11", "A17")
ppi[16, ] <- c("A12", "A14")
ppi[17, ] <- c("A12", "A15")
ppi[18, ] <- c("A12", "A16")
ppi[19, ] <- c("A13", "A16")
ppi[20, ] <- c("A13", "A17")
## TF
tf <- matrix(data = , nrow = 1, ncol = 4)
tf[1, ] <- c(NA, NA, "A14", "L1")
colnames(tf) <- c("pfam_source", "pfam_target", "gene_source", "gene_target")
tf <- as.data.frame(tf)
## DDI
unodes <- unique(c(ppi[, 1], ppi[, 2]))
cnt <- 1
dl <- list()
for(ii in 1:length(unodes)){
rr <- round(runif(n = 1, min = 2, max = 3))
if(ii == 1){
dl[[length(dl)+1]] <- cnt:rr
cnt <- rr + 1
} else {
dl[[length(dl)+1]] <- cnt:(cnt + rr)
cnt <- cnt + rr +1
}
}
names(dl) <- unodes
comb <- matrix(data = , nrow = , ncol = 4)
for(ii in 1:nrow(ppi)){
sdomains <- paste0("D", as.numeric(dl[[which(names(dl)==ppi[ii, 1])]]))
tdomains <- paste0("D", as.numeric(dl[[which(names(dl)==ppi[ii, 2])]]))
maxint <- min(c(length(sdomains), length(tdomains)))
currint <- round(runif(n = 1, min = 1, max = maxint))
tobind <- matrix(data = , nrow = currint, ncol = 4)
ss <- sample(x = sdomains, size = currint)
tt <- sample(x = tdomains, size = currint)
tobind[, 1] <- ss
tobind[, 2] <- tt
tobind[, 3] <- ppi[ii, 1]
tobind[, 4] <- ppi[ii, 2]
comb <- unique(rbind(comb, tobind))
}
colnames(comb) <- c("pfam_source", "pfam_target", "gene_source", "gene_target")
comb <- as.data.frame(comb)
comb <- comb[complete.cases(comb), ]
comb <- comb[-which(comb$pfam_source=="D7"), ]
## LR
lrA <- matrix(data = , nrow = 4, ncol = 4)
lrA[, 1] <- NA
lrA[, 2] <- c("D1", "D3", "D5", "D7")
lrA[, 3] <- c("L2", "L2", "L2", "L4")
lrA[, 4] <- c("A1|A2", "A1|A2", "A1|A2", "A3")
colnames(lrA) <- c("pfam_source", "pfam_target", "gene_source", "gene_target")
cellA <- rbind(comb, tf, lrA)
save(cellA, file = "src/cellA.RData")
#### Cell B
## PPI
ppi <- matrix(data = , nrow = 19, ncol = 2)
ppi[1, ] <- c("B1", "B3")
ppi[2, ] <- c("B1", "B4")
ppi[3, ] <- c("B2", "B4")
ppi[4, ] <- c("B2", "B5")
ppi[5, ] <- c("B3", "B6")
ppi[6, ] <- c("B3", "B7")
ppi[7, ] <- c("B4", "B8")
ppi[8, ] <- c("B5", "B9")
ppi[9, ] <- c("B6", "B10")
ppi[10, ] <- c("B7", "B11")
ppi[11, ] <- c("B8", "B11")
ppi[12, ] <- c("B8", "B12")
ppi[13, ] <- c("B9", "B11")
ppi[14, ] <- c("B10", "B13")
ppi[15, ] <- c("B10", "B14")
ppi[16, ] <- c("B11", "B14")
ppi[17, ] <- c("B11", "B15")
ppi[18, ] <- c("B12", "B15")
ppi[19, ] <- c("B12", "B16")
## TF
tf <- matrix(data = , nrow = 2, ncol = 4)
tf[1, ] <- c(NA, NA, "B13", "L1")
tf[2, ] <- c(NA, NA, "B16", "L2")
colnames(tf) <- c("pfam_source", "pfam_target", "gene_source", "gene_target")
tf <- as.data.frame(tf)
## DDI
unodes <- unique(c(ppi[, 1], ppi[, 2]))
cnt <- 1
dl <- list()
for(ii in 1:length(unodes)){
rr <- round(runif(n = 1, min = 2, max = 3))
if(ii == 1){
dl[[length(dl)+1]] <- cnt:rr
cnt <- rr + 1
} else {
dl[[length(dl)+1]] <- cnt:(cnt + rr)
cnt <- cnt + rr +1
}
}
names(dl) <- unodes
comb <- matrix(data = , nrow = , ncol = 4)
for(ii in 1:nrow(ppi)){
sdomains <- paste0("D", as.numeric(dl[[which(names(dl)==ppi[ii, 1])]]))
tdomains <- paste0("D", as.numeric(dl[[which(names(dl)==ppi[ii, 2])]]))
maxint <- min(c(length(sdomains), length(tdomains)))
currint <- round(runif(n = 1, min = 1, max = maxint))
tobind <- matrix(data = , nrow = currint, ncol = 4)
ss <- sample(x = sdomains, size = currint)
tt <- sample(x = tdomains, size = currint)
tobind[, 1] <- ss
tobind[, 2] <- tt
tobind[, 3] <- ppi[ii, 1]
tobind[, 4] <- ppi[ii, 2]
comb <- unique(rbind(comb, tobind))
}
colnames(comb) <- c("pfam_source", "pfam_target", "gene_source", "gene_target")
comb <- as.data.frame(comb)
comb <- comb[complete.cases(comb), ]
comb <- comb[-c(which(comb$pfam_source=="D1")), ]
## LR
lrB <- matrix(data = , nrow = 2, ncol = 4)
lrB[, 1] <- NA
lrB[, 2] <- c("D1", "D4")
lrB[, 3] <- c("L3", "L4")
lrB[, 4] <- c("B1", "B2")
colnames(lrB) <- c("pfam_source", "pfam_target", "gene_source", "gene_target")
cellB <- rbind(comb, tf, lrB)
save(cellB, file = "src/cellB.RData")
#### Cell C
## PPI
ppi <- matrix(data = , nrow = 21, ncol = 2)
ppi[1, ] <- c("C1", "C3")
ppi[2, ] <- c("C1", "C4")
ppi[3, ] <- c("C2", "C5")
ppi[4, ] <- c("C3", "C6")
ppi[5, ] <- c("C3", "C7")
ppi[6, ] <- c("C4", "C7")
ppi[7, ] <- c("C5", "C8")
ppi[8, ] <- c("C5", "C9")
ppi[9, ] <- c("C6", "C11")
ppi[10, ] <- c("C7", "C10")
ppi[11, ] <- c("C7", "C11")
ppi[12, ] <- c("C8", "C11")
ppi[13, ] <- c("C9", "C12")
ppi[14, ] <- c("C10", "C13")
ppi[15, ] <- c("C10", "C14")
ppi[16, ] <- c("C11", "C12")
ppi[17, ] <- c("C11", "C15")
ppi[18, ] <- c("C11", "C16")
ppi[19, ] <- c("C12", "C15")
ppi[20, ] <- c("C12", "C16")
ppi[21, ] <- c("C13", "L4")
## TF
tf <- matrix(data = , nrow = 3, ncol = 4)
tf[1, ] <- c(NA, NA, "C13", "L3")
tf[2, ] <- c(NA, NA, "C16", "L4")
tf[2, ] <- c(NA, NA, "C13", "L4")
colnames(tf) <- c("pfam_source", "pfam_target", "gene_source", "gene_target")
tf <- as.data.frame(tf)
## DDI
unodes <- unique(c(ppi[, 1], ppi[, 2]))
cnt <- 1
dl <- list()
for(ii in 1:length(unodes)){
rr <- round(runif(n = 1, min = 2, max = 3))
if(ii == 1){
dl[[length(dl)+1]] <- cnt:rr
cnt <- rr + 1
} else {
dl[[length(dl)+1]] <- cnt:(cnt + rr)
cnt <- cnt + rr +1
}
}
names(dl) <- unodes
comb <- matrix(data = , nrow = , ncol = 4)
for(ii in 1:nrow(ppi)){
sdomains <- paste0("D", as.numeric(dl[[which(names(dl)==ppi[ii, 1])]]))
tdomains <- paste0("D", as.numeric(dl[[which(names(dl)==ppi[ii, 2])]]))
maxint <- min(c(length(sdomains), length(tdomains)))
currint <- round(runif(n = 1, min = 1, max = maxint))
tobind <- matrix(data = , nrow = currint, ncol = 4)
ss <- sample(x = sdomains, size = currint)
tt <- sample(x = tdomains, size = currint)
tobind[, 1] <- ss
tobind[, 2] <- tt
tobind[, 3] <- ppi[ii, 1]
tobind[, 4] <- ppi[ii, 2]
comb <- unique(rbind(comb, tobind))
}
colnames(comb) <- c("pfam_source", "pfam_target", "gene_source", "gene_target")
comb <- as.data.frame(comb)
comb <- comb[complete.cases(comb), ]
## LR
lrC <- matrix(data = , nrow = 2, ncol = 4)
lrC[, 1] <- NA
lrC[, 2] <- c("D3", "D4")
lrC[, 3] <- c("L1", "L1")
lrC[, 4] <- c("C1", "C2")
colnames(lrC) <- c("pfam_source", "pfam_target", "gene_source", "gene_target")
cellC <- rbind(comb, tf, lrC)
save(cellC, file = "src/cellC.RData")
#### TF Scores
#
tf_scores <- list()
tfA <- matrix(data = , nrow = 4, ncol = 2)
tfA[, 1] <- paste0("A", 14:17)
tfA[, 2] <- c(1, 0, 0, 1)
colnames(tfA) <- c("tf", "score")
tfA <- as.data.frame(tfA)
tfA$score <- as.numeric(tfA$score)
tfB <- matrix(data = , nrow = 4, ncol = 2)
tfB[, 1] <- paste0("B", 13:16)
tfB[, 2] <- c(1, 1, 0, 1)
colnames(tfB) <- c("tf", "score")
tfB <- as.data.frame(tfB)
tfB$score <- as.numeric(tfB$score)
tfC <- matrix(data = , nrow = 4, ncol = 2)
tfC[, 1] <- paste0("C", 13:16)
tfC[, 2] <- c(1, 0, 1, 0)
colnames(tfC) <- c("tf", "score")
tfC <- as.data.frame(tfC)
tfC$score <- as.numeric(tfC$score)
tf_scores[[length(tf_scores)+1]] <- tfA
tf_scores[[length(tf_scores)+1]] <- tfB
tf_scores[[length(tf_scores)+1]] <- tfC
names(tf_scores) <- c("CellA", "CellB", "CellC")
tf.scores <- tf_scores
save(tf.scores, file = "src/tf.scores.RData")
top.tf <- c(2, 3, 2)
names(top.tf) <- paste0("Cell", c("A", "B", "C"))
save(top.tf, file = "src/top.tf.RData")
#### Ligand scores
#
ligand_scores <- matrix(data = , nrow = 4, ncol = 2)
ligand_scores[, 1] <- paste0("L", 1:4)
ligand_scores[, 2] <- c(1, 1, 0, 1)
colnames(ligand_scores) <- c("ligand", "score")
ligand_scores <- as.data.frame(ligand_scores)
ligand_scores$score <- as.numeric(ligand_scores$score)
ligand.scores <- ligand_scores
save(ligand.scores, file = "src/ligand.scores.RData")
#### CCC scores
#
ccc_prob <- matrix(data = , nrow = 3, ncol = 2)
ccc_prob[, 1] <- c("CellA=CellB", "CellA=CellC", "CellB=CellC")
ccc_prob[, 2] <- c(0.5, 0, 0.5)
colnames(ccc_prob) <- c("ccc", "prob")
ccc_prob <- as.data.frame(ccc_prob)
ccc_prob$prob <- as.numeric(ccc_prob$prob)
ccc.prob <- ccc_prob
save(ccc.prob, file = "src/ccc.prob.RData")
ccc.scores <- ccc.prob
colnames(ccc.scores) <- c("ccc", "score")
ccc.scores$score <- c(0.5, 0, 0.5)
ccc.scores$ccc <- c("CellA=CellB", "CellA=CellC", "CellB=CellC")
save(ccc.scores, file = "src/ccc.scores.RData")
background.networks.list <- list()
tmp1 <- list()
tmp1[[length(tmp1)+1]] <- cellA
tmp1[[length(tmp1)+1]] <- cellB
tmp1[[length(tmp1)+1]] <- cellC
names(tmp1) <- paste0("Cell", c("A", "B", "C"))
tmp2 <- list()
tmp2[[length(tmp2)+1]] <- paste0("L", 1:4)
tmp2[[length(tmp2)+1]] <- c("A1|A2", "A3", "B1", "B2", "C1", "C2")
names(tmp2) <- c("ligands", "receptors")
background.networks.list[[length(background.networks.list)+1]] <- tmp1
background.networks.list[[length(background.networks.list)+1]] <- tmp2
names(background.networks.list) <- c("background.networks", "ligands.receptors")
save(background.networks.list, file = "src/background.networks.list.RData")
### LR Scores
#
lr.scores <- list()
lrA <- background.networks.list$background.networks$CellA
idx <- intersect(x = which(is.na(lrA$pfam_source)),
y = which(!is.na(lrA$pfam_target)))
df <- matrix(data = , nrow = length(idx), ncol = 2)
df[, 1] <- paste0(lrA$gene_source[idx], "=", lrA$gene_target[idx])
df <- unique(df)
colnames(df) <- c("lr.interaction", "score")
df <- as.data.frame(df)
df$score <- round(x = runif(n = nrow(df), min = 0, max = 1), digits = 2)
lr.scores[[length(lr.scores)+1]] <- df
lrB <- background.networks.list$background.networks$CellB
idx <- intersect(x = which(is.na(lrB$pfam_source)),
y = which(!is.na(lrB$pfam_target)))
df <- matrix(data = , nrow = length(idx), ncol = 2)
df[, 1] <- paste0(lrB$gene_source[idx], "=", lrB$gene_target[idx])
df <- unique(df)
colnames(df) <- c("lr.interaction", "score")
df <- as.data.frame(df)
df$score <- round(x = runif(n = nrow(df), min = 0, max = 1), digits = 2)
df$score <- c(0.03, 0.97)
lr.scores[[length(lr.scores)+1]] <- df
lrC <- background.networks.list$background.networks$CellC
idx <- intersect(x = which(is.na(lrC$pfam_source)),
y = which(!is.na(lrC$pfam_target)))
df <- matrix(data = , nrow = length(idx), ncol = 2)
df[, 1] <- paste0(lrC$gene_source[idx], "=", lrC$gene_target[idx])
df <- unique(df)
colnames(df) <- c("lr.interaction", "score")
df <- as.data.frame(df)
df$score <- round(x = runif(n = nrow(df), min = 0, max = 1), digits = 2)
lr.scores[[length(lr.scores)+1]] <- df
names(lr.scores) <- names(background.networks.list$background.networks)
save(lr.scores, file = "src/lr.scores.RData")
#### Domain scores
df <- matrix(data = , nrow = 10, ncol = 4)
View(cellA)
#### Domain scores
df <- matrix(data = , nrow = 3, ncol = 4)
df[, 1] <- "CellA"
df[, 2] <- c("A11","A9", "A9")
df[, 3] <- c("D23", "D26", "D28")
df[, 4] <- c("exclusion", "inclusion", "inclusion")
colnames(df) <- c("cell_type", "proteinID", "domainID", "type")
as.input <- as.data.frame(df)
as.input
save(as.input, file = "src/as.input.RData")
rm(list = ls())
getwd()
getwd()
setwd("/home/enio/Downloads/LINDA_Plus_Dev/Splice_Effects/Package/Dev1/LINDAPlus/R/")
load(file = "../../../../Toy_Example/Toy2/src/as.input.RData")
load(file = "../../../../Toy_Example/Toy2/src/background.networks.list.RData")
load(file = "../../../../Toy_Example/Toy2/src/ccc.scores.RData")
load(file = "../../../../Toy_Example/Toy2/src/ligand.scores.RData")
load(file = "../../../../Toy_Example/Toy2/src/lr.scores.RData")
load(file = "../../../../Toy_Example/Toy2/src/tf.scores.RData")
load(file = "../../../../Toy_Example/Toy2/src/top.tf.RData")
!is.logical(splice_effect)
!is.null(as.input)
class(as.input)
colnames(as.input)
getwd()
